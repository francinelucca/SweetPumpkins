{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\franc\\\\sweet-pumpkins\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\franc\\\\sweet-pumpkins\\\\src\\\\Screens\\\\Main\\\\Main.js\";\nimport React from \"react\";\nimport \"./Main.css\";\nimport Navigation from \"../../Components/Navigation\";\nimport Movies from \"../../Components/Movies\";\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.storeMovies = data => {\n      console.log(data);\n      const movies = data.results.map(result => {\n        const vote_count = result.vote_count,\n              id = result.id,\n              genre_ids = result.genre_ids,\n              poster_path = result.poster_path,\n              title = result.title,\n              vote_average = result.vote_average,\n              release_date = result.release_date;\n        return {\n          vote_count,\n          id,\n          genre_ids,\n          poster_path,\n          title,\n          vote_average,\n          release_date\n        };\n      });\n      this.setState({\n        movies,\n        totalPages: data.total_pages\n      });\n    };\n\n    this.fetchMovies = url => {\n      fetch(url).then(response => response.json()).then(data => this.storeMovies(data)).catch(error => console.log(error));\n    };\n\n    this.onGenreChange = event => {\n      this.setState({\n        genre: event.target.value\n      });\n    };\n\n    this.onSliderChange = data => {\n      this.setState({\n        [data.type]: _objectSpread({}, this.state[data.type], {\n          value: data.value\n        })\n      });\n    };\n\n    this.onSearchButtonClick = () => {\n      this.setState({\n        currentPage: 1\n      });\n      this.generateUrl();\n    };\n\n    this.generateUrl = () => {\n      const _this$state = this.state,\n            genres = _this$state.genres,\n            year = _this$state.year,\n            rating = _this$state.rating,\n            runtime = _this$state.runtime,\n            currentPage = _this$state.currentPage;\n      const selectedGenre = genres.find(genre => genre.name === this.state.genre);\n      const genreId = selectedGenre.id;\n      const moviesUrl = `https://api.themoviedb.org/3/discover/movie?api_key=${process.env.REACT_APP_TMDB_API_KEY}&` + `language=en-US&sort_by=popularity.desc&with_genres=${genreId}&primary_release_date.gte=${year.value.min}-01-01&` + `primary_release_date.lte=${year.value.max}-12-31&vote_average.gte=${rating.value.min}&vote_average.lte=${rating.value.max}&` + `with_runtime.gte=${runtime.value.min}&with_runtime.lte=${runtime.value.max}&page=${currentPage}&`;\n      this.fetchMovies(moviesUrl);\n    };\n\n    this.setGenres = genres => {\n      this.setState({\n        genres\n      });\n    };\n\n    this.onPageIncrease = () => {\n      const _this$state2 = this.state,\n            currentPage = _this$state2.currentPage,\n            totalPages = _this$state2.totalPages;\n      const nextPage = currentPage + 1;\n\n      if (nextPage <= totalPages) {\n        this.setState({\n          currentPage: nextPage\n        });\n      }\n    };\n\n    this.onPageDecrease = () => {\n      const currentPage = this.state.currentPage;\n      const nextPage = currentPage - 1;\n\n      if (nextPage > 0) {\n        this.setState({\n          currentPage: nextPage\n        });\n      }\n    };\n\n    this.state = {\n      genre: 'Comedy',\n      genres: [],\n      year: {\n        label: \"year\",\n        min: 1990,\n        max: 2017,\n        step: 1,\n        value: {\n          min: 2000,\n          max: 2017\n        }\n      },\n      rating: {\n        label: \"rating\",\n        min: 0,\n        max: 10,\n        step: 1,\n        value: {\n          min: 8,\n          max: 10\n        }\n      },\n      runtime: {\n        label: \"runtime\",\n        min: 0,\n        max: 300,\n        step: 15,\n        value: {\n          min: 60,\n          max: 120\n        }\n      },\n      moviesUrl: `https://api.themoviedb.org/3/discover/movie?api_key=${process.env.REACT_APP_TMDB_API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1`,\n      currentPage: 1,\n      movies: [],\n      totalPages: 1\n    };\n  }\n\n  componentDidMount() {\n    const moviesUrl = this.state.moviesUrl;\n    this.fetchMovies(moviesUrl);\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    const currentPage = this.state.currentPage;\n\n    if (currentPage !== nextState.currentPage) {\n      this.generateUrl();\n    }\n  }\n\n  render() {\n    const _this$state3 = this.state,\n          genre = _this$state3.genre,\n          year = _this$state3.year,\n          rating = _this$state3.rating,\n          runtime = _this$state3.runtime,\n          genres = _this$state3.genres,\n          movies = _this$state3.movies,\n          currentPage = _this$state3.currentPage;\n    return React.createElement(\"section\", {\n      className: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Navigation, {\n      genre: genre,\n      year: year,\n      rating: rating,\n      runtime: runtime,\n      onGenreChange: this.onGenreChange,\n      onSliderChange: this.onSliderChange,\n      setGenres: this.setGenres,\n      genres: genres,\n      onSearch: this.onSearchButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.createElement(Movies, {\n      movies: movies,\n      onPageDecrease: this.onPageDecrease,\n      onPageIncrease: this.onPageIncrease,\n      page: currentPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/franc/sweet-pumpkins/src/Screens/Main/Main.js"],"names":["React","Navigation","Movies","Main","Component","constructor","props","storeMovies","data","console","log","movies","results","map","result","vote_count","id","genre_ids","poster_path","title","vote_average","release_date","setState","totalPages","total_pages","fetchMovies","url","fetch","then","response","json","catch","error","onGenreChange","event","genre","target","value","onSliderChange","type","state","onSearchButtonClick","currentPage","generateUrl","genres","year","rating","runtime","selectedGenre","find","name","genreId","moviesUrl","process","env","REACT_APP_TMDB_API_KEY","min","max","setGenres","onPageIncrease","nextPage","onPageDecrease","label","step","componentDidMount","componentWillUpdate","nextProps","nextState","render"],"mappings":"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","sourcesContent":["import React from \"react\"\r\nimport \"./Main.css\"\r\nimport Navigation from \"../../Components/Navigation\"\r\nimport Movies from \"../../Components/Movies\"\r\n\r\n\r\nclass Main extends React.Component { \r\n        constructor(props){\r\n            super(props);\r\n            this.state = {\r\n            genre: 'Comedy', \r\n            genres: [],\r\n            year: {\r\n                label: \"year\",\r\n                min: 1990,\r\n                max: 2017,\r\n                step: 1,\r\n                value: { min: 2000, max: 2017 }\r\n            },\r\n            rating: {\r\n                label: \"rating\",\r\n                min: 0,\r\n                max: 10,\r\n                step: 1,\r\n                value: { min: 8, max: 10 }\r\n            },\r\n            runtime: {\r\n                label: \"runtime\",\r\n                min: 0,\r\n                max: 300,\r\n                step: 15,\r\n                value: { min: 60, max: 120 }\r\n            },\r\n            moviesUrl: `https://api.themoviedb.org/3/discover/movie?api_key=${process.env.REACT_APP_TMDB_API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1`,\r\n            currentPage: 1,\r\n            movies: [],\r\n            totalPages: 1,\r\n            }\r\n    } \r\n\r\n        componentDidMount() {\r\n        const { moviesUrl } = this.state;\r\n        this.fetchMovies(moviesUrl);\r\n      }\r\n\r\n      componentWillUpdate(nextProps, nextState) {\r\n          const { currentPage } = this.state;\r\n        if (currentPage !== nextState.currentPage) {\r\n          this.generateUrl();\r\n        }\r\n      }\r\n\r\n      storeMovies = data => {\r\n          console.log(data);\r\n          const movies = data.results.map (result => {\r\n              const {vote_count, id, genre_ids, poster_path, title, vote_average, release_date } = result;\r\n              return { vote_count, id, genre_ids, poster_path, title, vote_average, release_date };\r\n          });\r\n\r\n          this.setState({ movies, totalPages: data.total_pages });\r\n\r\n      }\r\n\r\n      fetchMovies = url => {\r\n        fetch(url)\r\n          .then(response => response.json())\r\n          .then(data => this.storeMovies(data))\r\n          .catch(error => console.log(error))\r\n      }\r\n    \r\n    onGenreChange = event => {\r\n        this.setState({ genre: event.target.value });\r\n    }\r\n\r\n    onSliderChange = data => {\r\n        this.setState({\r\n            [data.type]: {\r\n                ...this.state[data.type],\r\n                value: data.value,\r\n            }\r\n        })\r\n    }\r\n\r\n    onSearchButtonClick = () => {\r\n        this.setState({currentPage: 1});\r\n        this.generateUrl();\r\n    }\r\n\r\n    generateUrl = () => {\r\n        const { genres, year, rating, runtime, currentPage } = this.state;\r\n        const selectedGenre = genres.find( genre => genre.name === this.state.genre );\r\n        const genreId = selectedGenre.id;\r\n\r\n        const moviesUrl = `https://api.themoviedb.org/3/discover/movie?api_key=${process.env.REACT_APP_TMDB_API_KEY}&` + \r\n        `language=en-US&sort_by=popularity.desc&with_genres=${genreId}&primary_release_date.gte=${year.value.min}-01-01&` + \r\n        `primary_release_date.lte=${year.value.max}-12-31&vote_average.gte=${rating.value.min}&vote_average.lte=${rating.value.max}&` +\r\n        `with_runtime.gte=${runtime.value.min}&with_runtime.lte=${runtime.value.max}&page=${currentPage}&`;\r\n\r\n        this.fetchMovies(moviesUrl);\r\n    }\r\n\r\n    setGenres = genres => {\r\n        this.setState({\r\n            genres,\r\n        })\r\n    }\r\n\r\n    onPageIncrease = () => {\r\n        const { currentPage, totalPages } = this.state;\r\n        const nextPage = currentPage+1;\r\n        if(nextPage <= totalPages){\r\n            this.setState({currentPage: nextPage });\r\n        }\r\n    }\r\n\r\n    onPageDecrease = () => {\r\n        const { currentPage } = this.state;\r\n        const nextPage = currentPage-1;\r\n        if(nextPage > 0 ){\r\n            this.setState({currentPage: nextPage });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { genre, year, rating, runtime, genres, movies, currentPage } = this.state\r\n        return (\r\n            <section className=\"main\">\r\n                <Navigation genre={genre} year={year} rating={rating} runtime={runtime} onGenreChange={this.onGenreChange} onSliderChange={this.onSliderChange} setGenres={this.setGenres} genres={genres} onSearch={this.onSearchButtonClick} />\r\n                <Movies movies={ movies }\r\n                onPageDecrease={this.onPageDecrease}\r\n                onPageIncrease={this.onPageIncrease}\r\n                page={currentPage} />\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main;"]},"metadata":{},"sourceType":"module"}