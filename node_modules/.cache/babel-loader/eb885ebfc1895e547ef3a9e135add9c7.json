{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\franc\\\\sweet-pumpkins\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\franc\\\\sweet-pumpkins\\\\src\\\\Screens\\\\Main\\\\Main.js\";\nimport React from \"react\";\nimport \"./Main.css\";\nimport Navigation from \"../../Components/Navigation\";\nimport Movies from \"../../Components/Movies\";\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.storeMovies = data => {\n      const movies = data.results.map(result => {\n        const vote_count = result.vote_count,\n              id = result.id,\n              genre_ids = result.genre_ids,\n              poster_path = result.poster_path,\n              title = result.title,\n              vote_average = result.vote_average,\n              release_date = result.release_date;\n        return {\n          vote_count,\n          id,\n          genre_ids,\n          poster_path,\n          title,\n          vote_average,\n          release_date\n        };\n      });\n      this.setState({\n        movies,\n        totalPages: data.total_pages\n      });\n    };\n\n    this.fetchMovies = url => {\n      fetch(url).then(response => response.json()).then(data => this.storeMovies(data)).catch(error => console.log(error));\n    };\n\n    this.saveStateToLocalStorage = () => {\n      localStorage.setItem(\"sweetpumpkins.params\", JSON.stringify(this.state));\n    };\n\n    this.getStateFromLocalStorage = () => {\n      return JSON.parse(localStorage.getItem(\"sweetpumpkins.params\"));\n    };\n\n    this.onGenreChange = event => {\n      this.setState({\n        genre: event.target.value\n      });\n    };\n\n    this.onSliderChange = data => {\n      this.setState({\n        [data.type]: _objectSpread({}, this.state[data.type], {\n          value: data.value\n        })\n      });\n    };\n\n    this.onSearchButtonClick = () => {\n      this.setState({\n        currentPage: 1\n      });\n      this.generateUrl(this.state);\n    };\n\n    this.generateUrl = params => {\n      const genres = params.genres,\n            year = params.year,\n            rating = params.rating,\n            runtime = params.runtime,\n            currentPage = params.currentPage,\n            genre = params.genre;\n      const selectedGenre = genres.find(genre => genre.name === genre);\n      const genreId = selectedGenre.id;\n      const moviesUrl = `https://api.themoviedb.org/3/discover/movie?api_key=${process.env.REACT_APP_TMDB_API_KEY}&` + `language=en-US&sort_by=popularity.desc&with_genres=${genreId}&primary_release_date.gte=${year.value.min}-01-01&` + `primary_release_date.lte=${year.value.max}-12-31&vote_average.gte=${rating.value.min}&vote_average.lte=${rating.value.max}&` + `with_runtime.gte=${runtime.value.min}&with_runtime.lte=${runtime.value.max}&page=${currentPage}&`;\n      this.fetchMovies(moviesUrl);\n    };\n\n    this.setGenres = genres => {\n      this.setState({\n        genres\n      });\n    };\n\n    this.onPageIncrease = () => {\n      const _this$state = this.state,\n            currentPage = _this$state.currentPage,\n            totalPages = _this$state.totalPages;\n      const nextPage = currentPage + 1;\n\n      if (nextPage <= totalPages) {\n        this.setState({\n          currentPage: nextPage\n        });\n      }\n    };\n\n    this.onPageDecrease = () => {\n      const currentPage = this.state.currentPage;\n      const nextPage = currentPage - 1;\n\n      if (nextPage > 0) {\n        this.setState({\n          currentPage: nextPage\n        });\n      }\n    };\n\n    this.state = {\n      genre: 'Comedy',\n      genres: [],\n      year: {\n        label: \"year\",\n        min: 1990,\n        max: 2017,\n        step: 1,\n        value: {\n          min: 2000,\n          max: 2017\n        }\n      },\n      rating: {\n        label: \"rating\",\n        min: 0,\n        max: 10,\n        step: 1,\n        value: {\n          min: 8,\n          max: 10\n        }\n      },\n      runtime: {\n        label: \"runtime\",\n        min: 0,\n        max: 300,\n        step: 15,\n        value: {\n          min: 60,\n          max: 120\n        }\n      },\n      moviesUrl: `https://api.themoviedb.org/3/discover/movie?api_key=${process.env.REACT_APP_TMDB_API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1`,\n      currentPage: 1,\n      movies: [],\n      totalPages: 1\n    };\n  }\n\n  componentDidMount() {\n    const savedState = this.getStateFromLocalStorage();\n    const moviesUrl = this.state.moviesUrl;\n\n    if (!savedState || savedState && !savedState.movies.length) {\n      this.fetchMovies(moviesUrl);\n    } else {\n      this.setState(_objectSpread({}, savedState));\n      this.generateUrl(savedState);\n    }\n  }\n\n  componentDidUpdate(nextProps, nextState) {\n    this.saveStateToLocalStorage();\n    const currentPage = this.state.currentPage;\n\n    if (currentPage !== nextState.currentPage) {\n      this.generateUrl(this.state);\n    }\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          genre = _this$state2.genre,\n          year = _this$state2.year,\n          rating = _this$state2.rating,\n          runtime = _this$state2.runtime,\n          genres = _this$state2.genres,\n          movies = _this$state2.movies,\n          currentPage = _this$state2.currentPage;\n    return React.createElement(\"section\", {\n      className: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(Navigation, {\n      genre: genre,\n      year: year,\n      rating: rating,\n      runtime: runtime,\n      onGenreChange: this.onGenreChange,\n      onSliderChange: this.onSliderChange,\n      setGenres: this.setGenres,\n      genres: genres,\n      onSearch: this.onSearchButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), React.createElement(Movies, {\n      movies: movies,\n      onPageDecrease: this.onPageDecrease,\n      onPageIncrease: this.onPageIncrease,\n      page: currentPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/franc/sweet-pumpkins/src/Screens/Main/Main.js"],"names":["React","Navigation","Movies","Main","Component","constructor","props","storeMovies","data","movies","results","map","result","vote_count","id","genre_ids","poster_path","title","vote_average","release_date","setState","totalPages","total_pages","fetchMovies","url","fetch","then","response","json","catch","error","console","log","saveStateToLocalStorage","localStorage","setItem","JSON","stringify","state","getStateFromLocalStorage","parse","getItem","onGenreChange","event","genre","target","value","onSliderChange","type","onSearchButtonClick","currentPage","generateUrl","params","genres","year","rating","runtime","selectedGenre","find","name","genreId","moviesUrl","process","env","REACT_APP_TMDB_API_KEY","min","max","setGenres","onPageIncrease","nextPage","onPageDecrease","label","step","componentDidMount","savedState","length","componentDidUpdate","nextProps","nextState","render"],"mappings":"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","sourcesContent":["import React from \"react\"\r\nimport \"./Main.css\"\r\nimport Navigation from \"../../Components/Navigation\"\r\nimport Movies from \"../../Components/Movies\"\r\n\r\n\r\nclass Main extends React.Component { \r\n        constructor(props){\r\n            super(props);\r\n            this.state = {\r\n            genre: 'Comedy', \r\n            genres: [],\r\n            year: {\r\n                label: \"year\",\r\n                min: 1990,\r\n                max: 2017,\r\n                step: 1,\r\n                value: { min: 2000, max: 2017 }\r\n            },\r\n            rating: {\r\n                label: \"rating\",\r\n                min: 0,\r\n                max: 10,\r\n                step: 1,\r\n                value: { min: 8, max: 10 }\r\n            },\r\n            runtime: {\r\n                label: \"runtime\",\r\n                min: 0,\r\n                max: 300,\r\n                step: 15,\r\n                value: { min: 60, max: 120 }\r\n            },\r\n            moviesUrl: `https://api.themoviedb.org/3/discover/movie?api_key=${process.env.REACT_APP_TMDB_API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1`,\r\n            currentPage: 1,\r\n            movies: [],\r\n            totalPages: 1,\r\n            }\r\n    } \r\n\r\n    componentDidMount() {\r\n    const savedState = this.getStateFromLocalStorage();\r\n    const { moviesUrl } = this.state;\r\n    if(!savedState || (savedState && !savedState.movies.length)){\r\n        this.fetchMovies(moviesUrl);\r\n    }\r\n    else{\r\n        this.setState({...savedState});\r\n        this.generateUrl(savedState)\r\n    }\r\n    }\r\n\r\n    componentDidUpdate(nextProps, nextState) {\r\n        this.saveStateToLocalStorage();\r\n        const { currentPage } = this.state;\r\n    if (currentPage !== nextState.currentPage) {\r\n        this.generateUrl(this.state);\r\n    }\r\n    }\r\n\r\n    storeMovies = data => {\r\n        const movies = data.results.map (result => {\r\n            const {vote_count, id, genre_ids, poster_path, title, vote_average, release_date } = result;\r\n            return { vote_count, id, genre_ids, poster_path, title, vote_average, release_date };\r\n        });\r\n\r\n        this.setState({ movies, totalPages: data.total_pages });\r\n\r\n    }\r\n\r\n    fetchMovies = url => {\r\n    fetch(url)\r\n        .then(response => response.json())\r\n        .then(data => this.storeMovies(data))\r\n        .catch(error => console.log(error))\r\n    }\r\n\r\n    saveStateToLocalStorage = () => {\r\n        localStorage.setItem(\"sweetpumpkins.params\", JSON.stringify(this.state));\r\n    }\r\n\r\n    getStateFromLocalStorage = () => {\r\n        return JSON.parse(localStorage.getItem(\"sweetpumpkins.params\"));\r\n    }\r\n    \r\n    onGenreChange = event => {\r\n        this.setState({ genre: event.target.value });\r\n    }\r\n\r\n    onSliderChange = data => {\r\n        this.setState({\r\n            [data.type]: {\r\n                ...this.state[data.type],\r\n                value: data.value,\r\n            }\r\n        })\r\n    }\r\n\r\n    onSearchButtonClick = () => {\r\n        this.setState({currentPage: 1});\r\n        this.generateUrl(this.state);\r\n    }\r\n\r\n    generateUrl = params => {\r\n        const { genres, year, rating, runtime, currentPage, genre } = params;\r\n        const selectedGenre = genres.find( genre => genre.name === genre );\r\n        const genreId = selectedGenre.id;\r\n\r\n        const moviesUrl = `https://api.themoviedb.org/3/discover/movie?api_key=${process.env.REACT_APP_TMDB_API_KEY}&` + \r\n        `language=en-US&sort_by=popularity.desc&with_genres=${genreId}&primary_release_date.gte=${year.value.min}-01-01&` + \r\n        `primary_release_date.lte=${year.value.max}-12-31&vote_average.gte=${rating.value.min}&vote_average.lte=${rating.value.max}&` +\r\n        `with_runtime.gte=${runtime.value.min}&with_runtime.lte=${runtime.value.max}&page=${currentPage}&`;\r\n\r\n        this.fetchMovies(moviesUrl);\r\n    }\r\n\r\n    setGenres = genres => {\r\n        this.setState({\r\n            genres,\r\n        })\r\n    }\r\n\r\n    onPageIncrease = () => {\r\n        const { currentPage, totalPages } = this.state;\r\n        const nextPage = currentPage+1;\r\n        if(nextPage <= totalPages){\r\n            this.setState({currentPage: nextPage });\r\n        }\r\n    }\r\n\r\n    onPageDecrease = () => {\r\n        const { currentPage } = this.state;\r\n        const nextPage = currentPage-1;\r\n        if(nextPage > 0 ){\r\n            this.setState({currentPage: nextPage });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { genre, year, rating, runtime, genres, movies, currentPage } = this.state\r\n        return (\r\n            <section className=\"main\">\r\n                <Navigation genre={genre} year={year} rating={rating} runtime={runtime} onGenreChange={this.onGenreChange} onSliderChange={this.onSliderChange} setGenres={this.setGenres} genres={genres} onSearch={this.onSearchButtonClick} />\r\n                <Movies movies={ movies }\r\n                onPageDecrease={this.onPageDecrease}\r\n                onPageIncrease={this.onPageIncrease}\r\n                page={currentPage} />\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main;"]},"metadata":{},"sourceType":"module"}